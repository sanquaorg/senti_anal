# -*- coding: utf-8 -*-
"""Untitled51.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tTSOOVbEGnkNBYUpgvNLlwLBdW6INWDq
"""

import numpy as np
import pandas as pd
df=pd.read_csv("https://raw.githubusercontent.com/sanquaorg/senti_anal/main/Copy%20of%20finalDataset0.2.csv")

x=df["teaching"]
y=df["teaching.1"]
df2=pd.concat([y,x],axis=1)


df1=pd.read_csv("https://raw.githubusercontent.com/sanquaorg/senti_anal/main/feedback.csv")
df2=df2.rename({"teaching.1":"Feedback","teaching":"Label"},axis=1)




df_final=pd.concat([df1,df2])


from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
X=df_final["Feedback"]
y=df_final["Label"]
final=Pipeline([('vect',TfidfVectorizer()),('model',SVC(probability=True))])
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
final.fit(X_train,y_train)
y_pred=final.predict(X_test)

# vectorizer = TfidfVectorizer()
# X_vectors = vectorizer.fit_transform(X)
# X_test_vectors = vectorizer.transform(X_test)
# logreg = LogisticRegression()
# logreg.fit(X_vectors, y)



# new_input = input("Enter a new feedback: ")
# new_input_vector = vectorizer.transform([new_input])
# y_pred_prob = logreg.predict_proba(new_input_vector)
# neg_prob=y_pred_prob[0][0]
# pos_prob=y_pred_prob[0][1]
# print("Probability of negative label:", y_pred_prob[0][0])
# print("Probability of positive label:", y_pred_prob[0][1])
# predicted_label = logreg.predict(new_input_vector)
# print("Prediction:", predicted_label)

import pickle
pickle.dump(final,open("sentiment_analysis.p","wb"))

import streamlit as st
model=pickle.load(open("sentiment_analysis.p","rb"))
st.title("Sentiment Analysis")
st.write("Enter Text for Analyzing Sentiment")
message=st.text_area("","Type Here...")
# new_input_vector = vectorizer.transform([message])
# predicted_label = logreg.predict(new_input_vector)
if st.button("PREDICT"):
  disp=" "
  a=model.predict([message])[0]
  if a==1:
    disp="Positive Sentiment"
  else:
    disp="Negative Sentiment"
  st.write("The sentiment of the given feedback is:", disp)

